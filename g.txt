git config --global user.name vaniko
git config --global user.email vaniko.archuadze.1@btu.edu.ge

git init
ssh key_____________________

ssh-keygen -t ed25519 -C vaniko.archuadze.1@btu.edu.ge
clip < ~/.ssh/id_ed25519.pub
___________________________
● კონკრეტული ფაილის დამატება - git add file.txt
● რამდენიმე ფაილის დამატება - git add file1.txt file2.py file3.cpp
● სამუშაო დირექტორიის ყველა ფაილის დამატება - git add
● ფაილების დამატება კონკრეტული დირექტორიიდან - git add
folder_name/
● კონკრეტული გაფართოების მქონე ფაილების დამატება - git add *.txt

● სამუშაო დირექტორიისა და ბოლო commit-ის განსხვავება - git diff
● Staging შრისა და სამუშაო დირექტორიის განსხვავება - git diff --staged
● ორი კონკრეტული commit-ის განსხვავება - git diff commit_id1
commit_id2
● კონკრეტული ფაილის ცვლილებების შედარება ორ commit-ს შორის - git
diff commit_id1 commit_id2 -- file1.txt
GIT-თან მუშაობისას, ხშირია არასწორი სინტაქსი და ბრძანებების არასწორი
თანმიმდევრობა. ნებისმიერი ბრძანების სინტაქსის და აზრის ნახვა თვითონ GIT-ში
შეიძლება:
● ზოგადი დახმარება - git help
● კონკრეტული ბრძანების ნახვა - git help “ბრძანება”
_________________________________
2 ბიჯით  HEAD^^    HEAD~2 ბოლოდან მე-3 commit-ის id
5 ბიჯით  HEAD^^^^^     HEAD~5 ბოლოდან მე-6 commit-ის id
_________________________________
● ტაგის შექმნა - git tag “ტაგის სახელი”
● ტაგების სიის ნახვა - git tag
● ტაგის წაშლა - git tag -d “ტაგის სახელი”
● ანოტირებული ტაგის შექმნა (ტაგის რომელიც მეტ ინფორმაციას შეიცავს
commit-ის შესახებ) - git tag -a “ტაგის სახელი”
-m "ტეგის აღწერა"


● ბოლო ქომითის გაუქმების ალიასი
git config --global alias.undo "reset --soft HEAD~1"
● ბოლო კომიტის სრულად გაუქმება
git config --global alias.hardundo "reset --hard HEAD~1"
● ბოლო კომიტის დეტალები
git config --global alias.last "log -1 HEAD"
________________________________

● ბრენჩის შექმნა - git branch “ბრენჩის სახელი”
● ბრენჩზე გადასვლა - git checkout “ბრენჩის სახელი”
● ბრენჩის წაშლა - git branch -d “ბრენჩის სახელი”
ამ ბრძანებით იშლება ისეთი ბრენჩები რომლებიც უკვე დამატებულია
(merged) ძირითად ბრენჩზე. დაუმერჯავი ბრენჩის წასაშლელად -d უნდა
ჩანაცვლდეს -D ანუ:
git branch -D “ბრენჩის სახელი”
● ლოკალური ბრენჩების სიის ნახვა - git branch
● ლოკალური და მოშორებული ბრენჩების სიიხ ნახვა - git branch -a

__________________
Git rebase master
Rebase კონფლიქტის დროს კონფლიქტი სტანდარტულად უნდა გადაიჭრას, ახალი
ფაილის add ბრძანებით უნდა დაემატოს და შემდეგ rebase-ის გასაგრძელებლად
გამოიყენება ბრძანება:
git rebase --continue
ხოლო rebase-ის გასაუქმებლად:
git rebase --abort
git rebase -i HEAD~(ქომითების რაოდენობა)

Pick - ბრძანება ტოვებს ქომითს ისე როგორც არის, ტექსტურ
რედაქტორში გამოიყენება ნაგულისხბევი მნიშვნელობით.
● Reword - ცვლის ქომითის კომენტარს.
● Edit - ცვლის ქომითის შიგთავსს. გამოყენების შემდეგ აბრუნებს
აღნიშნული ქომითის ვერსიას, რედაქტირების და შეცვლის
შესაძლებლობით. რის შემდეგაც საჭიროებს ფაილის დამატებას შეცვლას
და რებეისზე დაბრუნებას:
git add .
git commit --amend
git rebase --continue
● Squash - აერთიანებს რამოდენიმე ქომითს და მათ ნაცვლად ერთს
ტოვებს ისტორიაში. Squash-ის გამოყენება საჭიროებს pick ბრძანებას,
მაგალითად:
pick b2c3d4e Add file2
squash c3d4e5f Add file 1
აღნიშნული ბრძანებით b2c3d4e , c3d4e5f ქომითები გაერთიანდება.
● Fixup - აერთიანებს რამოდენიმე ქომითს, თუმცა არ ინახავს fixup-ის
შემდეგ მიწერილი ქომითის ცვლილებას, მაგალითად:
pick b2c3d4e Add file2
fixupc3d4e5f Add file 1
აღნიშნული ბრძანებით b2c3d4e , c3d4e5f ქომითები გაერთიანდება.
თუმცა დარცება მხოლოდ b2c3d4e ქომითის ცვლილებები.
● Drop - შლის ქომითს ქომითების ისტორიიდან.
___________________________________
git cherry-pick <ქომითის ჰეში>
git cherry-pick <პირველი ქომითის ჰეში> <მეორე ქომითის ჰეში>

კონფლიქტის მოგვარების შემდეგ საჭირო იქნება Cherry-pick ის გაჩერებული
პროცესის გაგრძელება ან ცვლილების გაკეთება თუ არ იქნება მიზანშეწონილი მისი
გაუქმება.
ამისთვის გამოიყენება შემდეგი ბრძანებები:
git cherry-pick --continue
git cherry-pick --abort
_______________________________
touch .gitignore ქმნის 
vi .gitignore შიგნით ჩაუწერ ფაილის სახელს რომელიც არ გინდა რო გამოჩნდეს
File.txt - კონკრეტული ფაილის მითითება
● *.txt - ყველა .txt გაფართოების ფაილის მიტითება
● /Pictures/ - “Pictures” საქაღალდის მითითება
ასევე არსებობს სხვა სიმბოლოებიც რომლებიც იშვიათად გამოიყენება, განვიხილოთ
ყველა სიმბოლო:
● * - 0 ან მეტი სიმბოლო
● ? - 1 სიმბოლო
● / - მითითება დირექტორიაზე
● # - კომენტარი
● ! - გამონაკლისი

___________________________________
mkdir git-exercise
cd git-exercise
git init
5 commit:
bash
Copy
Edit
echo "file 1" > file1.txt
git add .
git commit -m "Initial commit"

echo "file 2" > file2.txt
git add .
git commit -m "Second commit"

echo "file 3" > file3.txt
git add .
git commit -m "Third commit"

echo "file 4" > file4.txt
git add .
git commit -m "Fourth commit"

echo "file 5" > file5.txt
git add .
git commit -m "Fifth commit"
🌱 2. მეორე commit-იდან შექმენი feature ბრენჩი და დაამატე commits
bash
Copy
Edit
git checkout -b feature HEAD~3   # გადახტი მეორე commit-ზე (3 commit უკან)

# დაამატე რამდენიმე commit feature-ში
echo "feature 1" > feature1.txt
git add .
git commit -m "Feature commit 1"

echo "feature 2" > feature2.txt
git add .
git commit -m "Feature commit 2"

git checkout main
🔁 3. გააერთიანე feature და main ისე, რომ merge commit არ შეიქმნას (fast-forward თუ შესაძლებელია)
bash
Copy
Edit
git merge feature --ff-only
📝 4. შეცვალე მეორე commit-ის მესიჯი
დაგვჭირდება rebase:

bash
Copy
Edit
git rebase -i HEAD~5
ინტერაქტიული ფანჯარაში გამოჩნდება ასე:

sql
Copy
Edit
pick <commit_hash> Initial commit
pick <commit_hash> Second commit
pick <commit_hash> Third commit
pick <commit_hash> Fourth commit
pick <commit_hash> Fifth commit
შეცვალე მეორე commit-ის ხაზზე pick -> reword:

sql
Copy
Edit
pick <commit_hash> Initial commit
reword <commit_hash> Second commit
pick <commit_hash> Third commit
pick <commit_hash> Fourth commit
pick <commit_hash> Fifth commit
შემდეგ Git შეგეკითხება ახალ commit მესიჯზე — ჩაწერე ახალი ტექსტი.

➕ 5. დაამატე ფაილი მესამე commit-ის ისტორიაში
გამოიყენე rebase და edit:

bash
Copy
Edit
git rebase -i HEAD~5
შეცვალე ასე:

sql
Copy
Edit
pick <commit_hash> Initial commit
pick <commit_hash> Second commit
edit <commit_hash> Third commit
pick <commit_hash> Fourth commit
pick <commit_hash> Fifth commit
როცა გაჩერდება მესამე commit-ზე, დაამატე ფაილი:

bash
Copy
Edit
echo "new in third" > newfile.txt
git add newfile.txt
git commit --amend --no-edit
git rebase --continue
🔗 6. გააერთიანე მესამე და მეოთხე commit-ები
bash
Copy
Edit
git rebase -i HEAD~4
შეცვალე ასე:

php-template
Copy
Edit
pick <commit_hash> Third commit
squash <commit_hash> Fourth commit
შეგეკითხება commit მესიჯზე — გააერთიანე ან დატოვე როგორც გინდა.

❌ 7. წაშალე მეორე commit-ი ისტორიიდან
bash
Copy
Edit
git rebase -i HEAD~4
გამოჩნდება commit-ები. უბრალოდ წაშალე მეორე commit-ის სტრიქონი ან drop გამოიყენე:

sql
Copy
Edit
pick <commit_hash> Initial commit
drop <commit_hash> Second commit
pick <commit_hash> (merged third+fourth)
pick <commit_hash> Fifth commit

